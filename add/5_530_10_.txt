<!-- 1 -->
<link href="https://valkof.github.io/electronic-queue/lekar/public/doctor.css" rel="stylesheet" type="text/css">
<script language="JavaScript" type="text/JavaScript">
<!--


//-->
</script>

<div class="appointment">
	<div hidden>
		<button type="button" id="button-start" onclick="openStartScreen(this);">Начальный экран</button>
	</div>
	<iframe name="saveblank1" id="saveblank1" width=900 scrolling="yes" height=300 hidden></iframe>
	<div class="breadcrumb">
		<div class="buttons breadcrumb__buttons">
			<h2>Новый талон</h2>
			<div class="pattern-button">
				<span class="pattern__title">Отделение</span>
				<button type="button" id="breadcrumb-button-office" class="button breadcrumb__button" onclick=""></button>
			</div>
			<div class="pattern-button">
				<span class="pattern__title">Кабинет/Специалист</span>
				<button type="button" id="breadcrumb-button-room" class="button breadcrumb__button" onclick=""></button>
			</div>
			<div class="pattern-button">
				<span class="pattern__title">Месяц</span>
				<button type="button" id="breadcrumb-button-month" class="button breadcrumb__button" onclick=""></button>
			</div>
			<div class="pattern-join">
				<div class="pattern-button pattern-left">
					<span class="pattern__title">День</span>
					<button type="button" id="breadcrumb-button-day" class="button breadcrumb__button" onclick=""></button>
				</div>
				<div class="pattern-button pattern-right">
					<span class="pattern__title">Время</span>
					<button type="button" id="breadcrumb-button-time" class="button breadcrumb__button" onclick=""></button>
				</div>
			</div>
			<button type="button" id="breadcrumb-button-print" class="button breadcrumb__button" onclick="openModalPrint();" value="0">ЗАПИСАТЬСЯ</button>
		</div>
	</div>
	<main class="offices appointment__offices" border="1">
###<!-- 2 -->
		<section class="office appointment__office">
			<div class="buttons office__buttons">
				<button type="button" class="button office__button">@D3000800000</button>
			</div>
			<div class="rooms office__rooms" id="tr_@D3000606010">
###<!-- 3 -->
				<div class="room office__room">	
					<div class="room__button">
						<span>@D3000640000</span>
						<div>@D3000700000</div>
					</div>
					<div id="but_@D3000606010_@D3000636010" class="months room__months">
						<div class="months__buttons">
							@D3000650000
						</div>
						<div class="message">
							<p>Поднесите карту к считывателю</p>
							<img src="http://localhost:86/ochered/card.jpg" alt="электронный рецепт">
						</div>
						<div id="col_@D3000606010_@D3000636010" class="days months__days"></div>
					</div>
				</div>
###<!-- 4 -->
			</div>
		</section>
###<!-- 5 - регистрация через зеленую карточку value="9112420104267766" -->
	</main>
	<aside class="persona">
		<div id="ask_me" class="persona__auth">
			<input type="hidden" name="num_130" value="0">
			<input type="hidden" name="num_331" value="0">
			<div class="persona__input">
				<span>Ваш номер на карточке:</span>
				<input type="text" id="user-id" name="snum_" class="user-id" value="" OnChange="js_11_81_4()">
				<input type="button" class="button" value="войти" OnClick="document.forms.f_10_02_2_1.submit();">
			</div>
		</div>
		<div class="organization persona__organization">
			<span>Учреждение здравоохранения "Малоритская центральная районная больница"</span>
		</div>
	</aside>
	<nav class="nav">
		<button type="button" class="button" id="button-exit" onclick="exitToOchered();">Выйти</button>
		<button type="button" class="button" id="button-back" value="0" onclick="stepBack();">Назад</button>
		<button type="button" class="button" id="button-new-ticket" onclick="newTicket();">Новый талон</button>
	</nav>
	<div class="datetime">
		<span id="current-time"></span>
		<span id="current-date"></span>
	</div>
	<div id="modal" class="modal">
		<div class="modal__content">
			<p id="modal-message" class="modal__message"></p>
			<div id="modal-buttons" class="modal__buttons">
				<button type="button" class="button" id="modal-no" onclick="">НЕТ</buttton>
				<button type="button" class="button" id="modal-yes" onclick="">ДА</buttton>
				<button type="button" class="button" id="modal-ok" onclick="">ОК</buttton>
			</div>
		</div>
	</div>
	<div id="protect" class="protect">
	</div>
</div>
<!--
<script charset="koi8-r" src="https://valkof.github.io/electronic-queue/lekar/public/script.js"></script>
-->
<script>
const appointment = document.querySelector('.appointment');
const offices = document.querySelector('.offices');
const officeAll = document.querySelectorAll('.office');
const roomsAll = document.querySelectorAll('.rooms');
const monthsAll = document.querySelectorAll('.months');

const months = document.querySelectorAll('.month__button');
const breadcrumb = document.querySelector('.breadcrumb');
const persona = document.querySelector('.persona');
const userId = document.getElementById("user-id");

const buttonStart = document.getElementById('button-start');
const buttonBack = document.getElementById('button-back');
const currentTime = document.getElementById('current-time');
const currentDate = document.getElementById('current-date');
const buttonNewTicket = document.getElementById('button-new-ticket');

const modalWindow = document.getElementById('modal');
const modalMsg = document.getElementById('modal-message');
const modalButtons = document.getElementById('modal-buttons');
const modalOk = document.getElementById('modal-ok');
const modalYes = document.getElementById('modal-yes');
const modalNo = document.getElementById('modal-no');
const protect = document.getElementById('protect');
// const modalText = document.getElementById('modal-message');
// const modalContinue = document.getElementById('modal__continue');

const breadcrumbButtonOffice = document.getElementById('breadcrumb-button-office');
const breadcrumbButtonRoom = document.getElementById('breadcrumb-button-room');
const breadcrumbButtonMonth = document.getElementById('breadcrumb-button-month');
const breadcrumbButtonDay = document.getElementById('breadcrumb-button-day');
const breadcrumbButtonTime = document.getElementById('breadcrumb-button-time');
const breadcrumbButtonPrint = document.getElementById('breadcrumb-button-print');
const ticketElements = [buttonStart, breadcrumbButtonOffice, breadcrumbButtonRoom, breadcrumbButtonMonth, breadcrumbButtonDay, breadcrumbButtonTime];

let funPrintTiket = () => {};

const timerSeanceMax = 20000;
const timerDialogMax = 10000;
const timerMessageMax = 5000;
const ticket = [''];
const stackBack = [buttonStart];

document.documentElement.setAttribute('lang', 'ru');

function focusOnUserId() {
  console.log('ok');
  userId.focus();
};

const focusId = setInterval(focusOnUserId, 500);

function openDialogTimeoutSeance() {
  console.log('open');
  appointment.removeEventListener('click', installTimerSeance);
  timeoutID = setTimeout(exitToOchered, timerDialogMax);
  openModalContent('Необходимо ещё время?', null, () => {
	installTimerSeance();
	appointment.addEventListener('click', installTimerSeance);
	modalWindow.classList.remove('active');
	protect.classList.remove('active');
  }, () => {
	exitToOchered();
  })
}

let timeoutID = setTimeout(openDialogTimeoutSeance, timerSeanceMax);

function installTimerSeance() {
  clearTimeout(timeoutID);
  timeoutID = setTimeout(openDialogTimeoutSeance, timerSeanceMax);
  console.log(timeoutID);
};

appointment.addEventListener('click', installTimerSeance);


function currentDateTime() {
  const datetime = new Date();
  const date = datetime.toLocaleDateString('ru', {
	month: "long",
	day: "2-digit"
  });
  const time = datetime.toLocaleTimeString('ru', {
	hour: "2-digit",
	minute: "2-digit"
  });
  currentTime.innerText = time;
  currentDate.innerText = date;
};

currentDateTime();
setInterval(currentDateTime, 5000);

document.forms.f_10_02_2_1.addEventListener('submit', event => {
	js_11_81_4();
  clearInterval(focusId);
  const message = document.querySelector('.message.active');
  if (message) message.classList.remove('active');
  console.log('я выполнилась и удалилась');
  buttonNewTicket.value = 1;
	event.preventDefault();
}, {once: true});

function stepBack() {
  ticket.pop();
  ticket.pop();
  stackBack.pop();
  const element = stackBack.pop();
  element.click();
}

function setTicketCaption() {
  ticketElements.forEach((element, num) => {
	element.innerHTML = ticket[num] || '';
  })
}

function clearActive(element) {
  const elementsSearch = element.querySelectorAll('.active');
  elementsSearch.forEach(elementActive => elementActive.classList.remove('active'));
};

function clearMute(element) {
  const elementsSearch = element.querySelectorAll('.mute');
  elementsSearch.forEach(elementActive => elementActive.classList.remove('mute'));
};

function openStartScreen(event) {
  event.disabled = true;

  ticket.push('');
  setTicketCaption();

  clearActive(appointment);
  appointment.classList.remove('active');

  stackBack.push(event);

  buttonBack.value = 0;
  breadcrumbButtonPrint.value = 0;

  event.disabled = false;
};

function newTicket() {
  document.f_10_02_2_1.submit();
}

officeAll.forEach(office => {
  const button = office.querySelector('.office__button');	
  button.addEventListener('click', function() {
	this.disabled = true;

	ticket.push(this.innerHTML);
	setTicketCaption();
	
	clearActive(office);

	office.classList.add('active');
	appointment.classList.add('active');

	stackBack.push(button);

	buttonBack.value = 1;
	breadcrumbButtonPrint.value = 0;

	this.disabled = false;
  });
});

roomsAll.forEach(rooms => {
  const roomAll = rooms.querySelectorAll('.room');
  roomAll.forEach(room => {
	const button = room.querySelector('.room__button');
	const span = button.querySelector('span');

	button.addEventListener('click', function() {
	  this.disabled = true;

	  ticket.push(span.innerHTML);
	  setTicketCaption();

	  clearActive(room);

	  room.classList.add('active');
	  rooms.classList.add('active');

	  stackBack.push(button);

	  buttonBack.value = 2;
	  breadcrumbButtonPrint.value = 0;

	  this.disabled = false;
	})
  })
})

monthsAll.forEach(months => {
  const message = months.querySelector('.message');
  const days = months.querySelector('.days');
  const monthButtons = months.querySelectorAll('.month__button');
  monthButtons.forEach(button => {
	button.addEventListener('click', function() {
	  this.disabled = true;

	  if (document.f_10_02_2_1.num_130.value == 0) {
		//alert('Зарегистрируйтесь указав свой логин и ПИН');
		message.classList.add('active');
		document.f_10_02_2_1.snum_.focus();
		this.disabled = false;
		return
	  };
	  message.classList.remove('active');

	  ticket.push(button.value);
	  setTicketCaption();

	  clearActive(months);

	  months.classList.add('active');
	  days.innerHTML = '';  

	  stackBack.push(button);

	  buttonBack.value = 3;
	  breadcrumbButtonPrint.value = 0;
	  
	  this.disabled = false;
	})

  })
})

function dayActive(event) {
  event.disabled = true;
  // const daysWrapper = document.querySelector('.days__wrapper');
  const daysWrapper = event.parentElement.parentElement;
  console.log(daysWrapper);
  const dayAll = daysWrapper.querySelectorAll('.day');
  
  const dayNumber = event.querySelector('.number').innerHTML;
  const dayWeek = event.querySelector('.week').innerHTML;
  ticket.push(dayNumber + ' ' + dayWeek);
  setTicketCaption();
  
  clearActive(daysWrapper);

  event.parentElement.classList.add('active');
  daysWrapper.classList.add('active');

  stackBack.push(event);

  buttonBack.value = 4;
  breadcrumbButtonPrint.value = 0;

  event.disabled = false;
}

function timeActive(event) {
  event.disabled = true;
  const times = event.parentElement;
  const timeAll = times.querySelectorAll('.day');

  ticket.push(event.value);
  setTicketCaption();
  
  clearActive(times);

  times.classList.add('active');
  event.classList.add('active');

  stackBack.push(event);

  buttonBack.value = 5;
  breadcrumbButtonPrint.value = 1;

  event.disabled = false;
}


function couponGenerated(nVid_, nGr_l, nNum_, sTarget_, sAddn_, sAction_) {
  funPrintTiket = function() {
	const fio = document.getElementById('name-patient');
	ticket[0] = fio.value;
	sAddn_ += ',' + ticket.join(','); 
	console.log(sAddn_);
	jsa_031(nVid_, nGr_l, nNum_, sTarget_, sAddn_, sAction_);
  }
}

function openModalContent(message, funOk, funYes, funNo) {
  clearActive(modalWindow);
  clearMute(modalWindow);
  [modalOk.disabled, modalYes.disabled, modalNo.disabled] = [false, false, false];
  modalMsg.innerHTML = message;
  if (funOk || funYes || funNo) {
	modalButtons.classList.add('active');
  };
  if (funOk) {
	modalOk.classList.add('active');
	modalOk.onclick = function() {
	  [modalOk.disabled, modalYes.disabled, modalNo.disabled] = [true, true, true];
	  protect.classList.add('active');
	  modalOk.classList.add('mute');
	  funOk();
	}
  };
  if (funYes) {
	modalYes.classList.add('active');
	modalYes.onclick = function() {
	  [modalOk.disabled, modalYes.disabled, modalNo.disabled] = [true, true, true];
	  protect.classList.add('active');
	  modalYes.classList.add('mute');
	  funYes();
	}
  };
  if (funNo) {
	modalNo.classList.add('active');
	modalNo.onclick = function() {
	  [modalOk.disabled, modalYes.disabled, modalNo.disabled] = [true, true, true];
	  protect.classList.add('active');
	  modalNo.classList.add('mute');
	  funNo();
	}
  };
  modalWindow.classList.add('active');
}

function openModalPrint() {
  openModalContent('Вы уверены?', null, () => {
	appointment.removeEventListener('click', installTimerSeance);
	clearTimeout(timeoutID);
	funPrintTiket();
  }, () => {
	protect.classList.remove('active');
	modalWindow.classList.remove('active');
  });
};

function openModalTakeToTiket() {
  timeoutID = setTimeout(exitToOchered, timerMessageMax);
  openModalContent('Заберите талон.', null, null, null);
};

function openModalAuth(message) {
  appointment.removeEventListener('click', installTimerSeance);
  clearTimeout(timeoutID);
  timeoutID = setTimeout(exitToOchered, timerDialogMax);
  openModalContent(message, () => {
	exitToOchered();
  }, null, null);
};

function exitToOchered() {
  document.forms.f_10_02_2_1.action = 'http://localhost:86/ochered/ochered.html';
  document.forms.f_10_02_2_1.target = '_self';
  document.forms.f_10_02_2_1.submit();
};

function js_11_81_1(sIn_) {
  if (document.f_10_02_2_1.num_130.value == 0) {
   //alert('Зарегистрируйтесь указав свой логин и ПИН');
   document.f_10_02_2_1.snum_.focus();
   return
  }
  jsa_031(5,530,11,'saveblank1',sIn_,'is10_08');
 }

 function js_11_81_4() {
  sTmp = document.f_10_02_2_1.snum_.value;
  if (sTmp.length != 16) {
	alert('Укажите номер карточки');
	document.f_10_02_2_1.snum_.focus();
	return
  }
  jsa_031(5,530,17,'saveblank1','','is10_08');
 }

</script>
###<!-- 6 -->
<input type="button" class="button month__button" value="@D3000150000" title="Запись на месяц" onClick="js_11_81_1('@D3000606010,@D3000166010,@D3000670000,@D3000680000,@D3000690000,@D3000636010');">
###<!-- 7 -->
<span class="month-text">@D3000150000</span>
###<!-- 8 -->


#PROGRAM:
LOCAL sTmp, nTmp, cSql, aTmp_ := {}, sOut_ := "", aMon_ := {'Январь','Февраль','Март','Апрель','Май','Июнь','Июль','Август','Сентябрь','Октябрь','Ноябрь','Декабрь'}, sMon_:=SUBSTR(DTOS(a998_[01]),1,6)
*? '5,530,10 =',a003_,'<br>',aPar_

DO WHILE .T.
* ищем кеш готового расписания за 10 минут
	sDat_ := DTOS(a998_[01])
/*
	sNam_f := ZSTR(a999_[22])+"_"+ATREPL(":",SUBSTR(TIME(),1,4),"")+".ras"
*? '<br>110=', FILE(sDat_+"\"+sNam_f),sDat_+"\"+sNam_f,DIRECTORY()
	IF FILE(sDat_+"\"+sNam_f)
		sTmp = MEMOREAD(sDat_+"\"+sNam_f)
*? '<br>111=', LEN(sTmp), 
?? sTmp
		EXIT
	ENDIF
*/
	cSql = "SELECT "+;
"T130__03,"+;	// отделение
"T130__09,"+;	// подразделение
"T130__01,"+;	// настройка
"a1.T134__06,"+; // место оказания услуги
"a1.T134__13,"+; // название места оказания
"MIN(T131__03),"+;	// минимальное время
"MAX(T131__03),"+;	// максимальное время
"COUNT(*) "+;	// количество сеансов
"FROM T130,T134 as a1,T131,T134 as a2 WHERE "+;
"T130__04=51 AND T130__05=20 AND T130__07 LIKE '__1%' AND T130__10=1 AND T130__97="+ZSTR(a999_[22])+" AND T130__98=0 AND "+;  // договора учета
"a1.T134__01=T130__15 AND a1.T134__14=31 AND a1.T134__97=T130__97 AND a1.T134__98=0 AND "+;  // места оказания услуг
"T131__02=T130__01 AND T131__03>="+sMon_+" AND T131__08=5102020 AND T131__97=T130__97 AND T131__98=0 AND "+;  // ежемесячники записи на прием
"a2.T134__01=T131__01 AND a2.T134__14=1000 AND a2.T134__97=T130__97 AND a2.T134__98=0 "+;  // часы приема типа "для записи через инет" свободные
"GROUP BY 1,2,3,4,5 "+;
"ORDER BY 1,4"
* AND a2.T134__07 LIKE '___1%'
*? '<br>1=',cSql
*nTmp = SECONDS()
	IF .NOT. CheckResult(CT12_219_(hPipe,cSql,aTmp_))
		sRet_ = 'Int.err 7 1'
		EXIT
	ENDIF
	nLen_ = LEN(aTmp_)
*? SECONDS()-nTmp,nLen_,aTmp_
	IF nLen_ = 0
? '<H4>Отсутствуют свободные записи на прием !</H4>'
		EXIT
	ENDIF
	aOut_  := {}
	aOut_1 := {}
	nLen_1 := 0
	sJrn_:= ''
	a000_[61] := 0
	a000_[62] := 0
	a000_[63] := aTmp_[04]
	a000_[64] := aTmp_[05]
	a000_[65] := ''
	a000_[70] := ''
sTmp := AT0_001_(XP:PART[01])
sOut_ += sTmp
? sTmp
	FOR nI_ = 1 to nLen_ STEP 8
		IF aTmp_[nI_] <> a000_[61] .OR. aTmp_[nI_+1] <> a000_[62] // новое отделение
			IF a000_[61] > 0 // закрыть
sTmp := AT0_001_(XP:PART[04])
sOut_ += sTmp
? sTmp
			ENDIF
			a000_[61] := aTmp_[nI_]
			a000_[60] := aTmp_[nI_+2]
			a000_[62] := aTmp_[nI_+1]
			a000_[80] := AT2_101_("T104__03 FROM T104 WHERE T104__01="+ZSTR(a000_[61])+" AND T104__97="+ZSTR(a999_[22])+" AND T104__98=0",,4)
			IF a000_[62] > 0
				a000_[80] += ' '+AT2_101_("T104__03 FROM T104 WHERE T104__01="+ZSTR(a000_[62])+" AND T104__97="+ZSTR(a999_[22])+" AND T104__98=0",,4)
			ENDIF
			a000_[67] := CT3_027_(1,a000_[80])
sTmp := AT0_001_(XP:PART[02])
sOut_ += sTmp
? sTmp
		ENDIF
		a000_[63] := aTmp_[nI_+3]
		a000_[64] := aTmp_[nI_+4]
		a000_[68] := CT3_027_(1,a000_[64])
		sTmp := STR(aTmp_[nI_+5],6)
		nTmp1 := VAL(SUBSTR(sTmp ,1,4))*100
		nTmp := VAL(SUBSTR(sTmp ,5,2))
		nLen_0 := VAL(SUBSTR(STR(aTmp_[nI_+6],6),5,2))
		a000_[65] := ''
		a000_[70] := ''
		FOR nI_0 = nTmp to nLen_0
			a000_[15] := aMon_[nI_0]
			a000_[69] := CT3_027_(1,a000_[15])
			a000_[16] := nTmp1+nI_0
			a000_[65] += AT0_001_(XP:PART[06])
			a000_[70] += AT0_001_(XP:PART[07])
		NEXT
		a000_[66] := ZSTR(aTmp_[nI_+7])
sTmp := AT0_001_(XP:PART[03])
sOut_ += sTmp
? sTmp
	NEXT
sTmp := AT0_001_(XP:PART[04])
sOut_ += sTmp
? sTmp
sTmp := AT0_001_(XP:PART[05])
sOut_ += sTmp
? sTmp
	IF DIRCHANGE(sDat_) <> 0
		nTmp := DIRMAKE(sDat_)
		IF nTmp <> 0
			sRet_ := 'Ошибка при создании директории (ERR: '+ZSTR(nTmp)+')!'
		ENDIF
		DIRCHANGE(sDat_)
	ENDIF
*? '<br>112=', FILE(sNam_f),sNam_f,DIRECTORY()
*? 
memowrite(sNam_f,sOut_) // записать текст в файл
*? '<br>113=',FILE(sNam_f)
	EXIT
ENDDO
		
	